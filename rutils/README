== Добро пожаловать в RuTils

RuTils - простой обработчик русского текста на Ruby. Основная цель RuTils - сделать
разработку русскоязычных приложений на Ruby (и Rails) максимально простой и приятной (в идеале - столь же
простой как и разработку оных на английском)

Весь функционал RuTils поддерживает только UTF-8 (настройка $KCODE / KanjiCode 'u'). Стандартно работа RuTils проверяется
как на стандартной версии Ruby, так и на парсере регулярных выражений Oniguruma (правда имейте в виду, что с ним
Gilenson работает медленнее).
	
Пожалуйста упоминайте версию при сообщении ошибок. Версию RUTILS всегда можно узнать в константе

  RuTils::VERSION

Удостоверьтесь, что ваш скрипт правильно обрабатывает Unicode - то есть:

* Переменная $KCODE включена в режим 'u'
* В скрипт загружена библиотека jcode

Если вы используете RuTils для сайта под mod_ruby воспользуйтесь директивой RubyKanjiCode в своем httpd.conf.

Большое спасибо Роману Иванову aka Kukutz и Николаю Яремко aka Kuso Mendokuzee за реализацию большинства алгоритмов
на PHP.

Разработку RuTils ведут Julik[http://live.julik.nl] и Mash[http://imfo.ru]

== Cумма прописью и выбор числительного

RuTils реализует сумму прописью для целых и дробных чисел, с дополнительным учетом рода. Например:

	4.propisju	=> "четыре"
	345.propisju => "триста сорок пять"
	231.propisju(2) => "двести тридцать одна"
	341.propisju_items(1, "чемодан", "чемодана", "чемоданов") => "триста сорок один чемодан"
	(212.40).propisju_items(2, "сволочь", "сволочи", "сволочей") => "двести двенадцать целых четыре десятых сволочи"
	(413.2).rublej => "четыреста тринадцать рублей двадцать копеек"
	
Также реализуется выбор варианта числительного в зависимости от числа

	15.items("кодер", "кодера", "кодеров") => "кодеров"

== Транслит

RuTils на данный момент реализует простейший транслит "в одну сторону" и "взаимно-однозначный транслит" (BiDi-транслит).

Простейший транслит "в одну сторону".

 	"Вот такое вот дело".translify => "Vot takoye vot delo"
	"Несомненный прогресс по сравнению с PHP".dirify => "nesomnennyi-progress-po-sravneniu-s-php"
	
== BiDi-транслит.

Порт BiDiTranslit[http://pixel-apes.com/translit/article#h256-10] от Pixel Apes.
Реализует транслитерацию "в обе стороны", предоставляя возможность получить валидный URL
из строки, содержащей русские и английские буквы. С некоторыми потерями (запятых и прочих
"слабозначащих" символов) возможно восстановление исходной строки.

Два режима работы:

* Уничтожение всех слешей, которые встретятся во входной строке. В этом случае методы вызываются с передачей в них false. Например, "Web/Скрипты".bidi_translify(false)
* Пропуск слэшей (используется по умолчанию). Например, "Web/+Skripty".bidi_detranslify

	"WebРазработка/Скрипты".bidi_translify     => "Web+Razrabotka+/+Skripty"
	"+Ustanovka__+mod_perl".bidi_detranslify   => "Установка mod_perl"
	"WebРазработка/Мимо".bidi_translify(false) => "Web+RazrabotkaMimo"
	"+PKHP+/Scripts".bidi_translify(false)     => "ПХПScripts"

== Обработка русской типографики в HTML

Gilenson - порт Typografica[http://pixel-apes.com/typografica] от
Pixel Apes. Тыпографица - механизм автоматической расстановки подстановок в тексте
перед его выводом в HTML, оформляющий неразрывные пробелы, типографские кавычки
и реализующая элементарные макроподстановки.

	%q{ "И это называется языком?", -- таков был его вопрос}.gilensize => "&amp;laquo;И это&amp;nbsp;называется языком?&&amp;raquo;, &mdash; таков был&amp;nbsp;его вопрос" 

Имейте в виду, что на баги в Gilenson жаловаться разработчикам Typografica не стоит -
они вас не поймут и будут правы. Поддержку Gilenson PixelApes не осуществляют.

В комплекте также есть скрипт gilensize, которым можно поточно обрабатывать Unicode-тексты в среде UNIX
пользуясь стандартным выводом

	$ cat myfile.txt | gilensize > myfile.html

== Интеграция с Rails, RedCloth и BlueCloth

RuTils в первую очередь задумывался как максимально "прозрачный" механизм обработки русского текста
в контексте Rails-приложения. Если вы используете RuTils в одном приложении с RedCloth или BlueCloth,
RuTils автоматически будет обрабатывать типографику во всех текстах, пропускаемых через них. Имейте в виду, что для
корректной работы этой функции RuTils надо загружать после модулей RedCloth и BlueCloth.


В принципе если вы пользуетесь RedCloth или BlueCloth все что ими обрабатывается будет автоматически
обрабатываться и Gilenson'ом тоже. В случае с RedCloth Glienson автоматически заменяет стандартные для
Textile английские кавычки и типографские знаки на свои - русские. В случае BlueCloth Gilenson используется
как "декоратор" Markdown.

Перегрузку всех функций (RedCloth, BlueCloth и компоненты Rails) можно включать и отключать в любое время
с помощью метода overrides= модуля RuTils. Когда перегрузка выключена, все сторонние библиотеки будут работать
в стандартном режиме (например, RedCloth будет расставлять английские типографские кавычки). Это нужно
когда вам нужно переключиться на английский (или любой другой язык) без перезапуска приложения.

Если вы хотите использовать rutils как дополенние к Rails в одном конкретном приложении, скопируйте
директорию rutils в папку vendor/plugins вашего приложения. Вы можете воспользоваться командой
rutilize чтобы сделать это автоматически. После этого вы сможете использовать RuTils без
необходимости установки gem'а на вашем сервере.

  $ rutilize /Sites/my_app1 /Sites/my_app2 /Sites/my_another_app
  
Вы можете свободно распространять RuTils со своим Rails-приложением при условии сохранения структуры
и файла README.

== Требования

* Ruby 1.8.2, немного прямых рук.
* Rake[http://rake.rubyforge.org], Rails[http://rubyonrails.org], RedCloth[http://www.whytheluckystiff.net/ruby/redcloth/] и BlueCloth[http://www.deveiate.org/projects/BlueCloth] для выполнения тестов 

== Как использовать

Просто включите rutils в свою программу как gem

	require_gem 'rutils'
	
или как библиотеку

	require 'rutils'
	
== Где получить помощь

На странице проекта на RubyForge[http://rubyforge.org/projects/rutils]

== Работает ли это с текстом  в кодировке Windows-1251

Нет и никогда не будет. 